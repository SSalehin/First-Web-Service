//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseServiceClient.CourseServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StudentNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class StudentNotExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CourseNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class CourseNotExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CourseFullFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class CourseFullFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlreadyRegisteredFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class AlreadyRegisteredFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrerequisiteNotMetFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class PrerequisiteNotMetFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TakenTooManyCoursesFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class TakenTooManyCoursesFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrerequisiteOfAnotherFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
    [System.SerializableAttribute()]
    public partial class PrerequisiteOfAnotherFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CourseServiceReference.ICourseService")]
    public interface ICourseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/Register", ReplyAction="http://tempuri.org/ICourseService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.StudentNotExistsFault), Action="http://tempuri.org/ICourseService/RegisterStudentNotExistsFaultFault", Name="StudentNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.CourseNotExistsFault), Action="http://tempuri.org/ICourseService/RegisterCourseNotExistsFaultFault", Name="CourseNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.CourseFullFault), Action="http://tempuri.org/ICourseService/RegisterCourseFullFaultFault", Name="CourseFullFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.AlreadyRegisteredFault), Action="http://tempuri.org/ICourseService/RegisterAlreadyRegisteredFaultFault", Name="AlreadyRegisteredFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.PrerequisiteNotMetFault), Action="http://tempuri.org/ICourseService/RegisterPrerequisiteNotMetFaultFault", Name="PrerequisiteNotMetFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.TakenTooManyCoursesFault), Action="http://tempuri.org/ICourseService/RegisterTakenTooManyCoursesFaultFault", Name="TakenTooManyCoursesFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        void Register(int studentID, string courseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/Register", ReplyAction="http://tempuri.org/ICourseService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(int studentID, string courseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/Unregister", ReplyAction="http://tempuri.org/ICourseService/UnregisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.StudentNotExistsFault), Action="http://tempuri.org/ICourseService/UnregisterStudentNotExistsFaultFault", Name="StudentNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.CourseNotExistsFault), Action="http://tempuri.org/ICourseService/UnregisterCourseNotExistsFaultFault", Name="CourseNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.PrerequisiteOfAnotherFault), Action="http://tempuri.org/ICourseService/UnregisterPrerequisiteOfAnotherFaultFault", Name="PrerequisiteOfAnotherFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        void Unregister(int studentID, string courseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/Unregister", ReplyAction="http://tempuri.org/ICourseService/UnregisterResponse")]
        System.Threading.Tasks.Task UnregisterAsync(int studentID, string courseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/GetRegistrationList", ReplyAction="http://tempuri.org/ICourseService/GetRegistrationListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CourseServiceReference.StudentNotExistsFault), Action="http://tempuri.org/ICourseService/GetRegistrationListStudentNotExistsFaultFault", Name="StudentNotExistsFault", Namespace="http://schemas.datacontract.org/2004/07/CourseService")]
        string[] GetRegistrationList(int studentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICourseService/GetRegistrationList", ReplyAction="http://tempuri.org/ICourseService/GetRegistrationListResponse")]
        System.Threading.Tasks.Task<string[]> GetRegistrationListAsync(int studentID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICourseServiceChannel : CourseServiceReference.ICourseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CourseServiceClient : System.ServiceModel.ClientBase<CourseServiceReference.ICourseService>, CourseServiceReference.ICourseService {
        
        public CourseServiceClient() {
        }
        
        public CourseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CourseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CourseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Register(int studentID, string courseID) {
            base.Channel.Register(studentID, courseID);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(int studentID, string courseID) {
            return base.Channel.RegisterAsync(studentID, courseID);
        }
        
        public void Unregister(int studentID, string courseID) {
            base.Channel.Unregister(studentID, courseID);
        }
        
        public System.Threading.Tasks.Task UnregisterAsync(int studentID, string courseID) {
            return base.Channel.UnregisterAsync(studentID, courseID);
        }
        
        public string[] GetRegistrationList(int studentID) {
            return base.Channel.GetRegistrationList(studentID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRegistrationListAsync(int studentID) {
            return base.Channel.GetRegistrationListAsync(studentID);
        }
    }
}
